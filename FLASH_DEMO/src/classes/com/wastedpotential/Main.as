package com.wastedpotential {	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.KeyboardEvent;		public class Main extends MovieClip {		private var _currentKeys:Array = [];		private var _currentKey:int = 0;		private var _nextKey:int = 0;		private var _currentPosition:int = 0;				private var currentX:Number;		private var currentY:Number;		private var vX:Number = 2;		private var aX:Number = 0.5;		private var baby:MovieClip;				private var xOffset1:int = -35;		private var A1:Number = 0.04361;		private var B1:Number = -6.2803;		private var C1:Number = 300;				private var xOffset2:int = 109;		private var A2:Number = 0.03928;		private var B2:Number = -4.8703;		private var C2:Number = 300;				private var xOffset3:int = 233;		private var A3:Number = 0.02228;		private var B3:Number = -2.9851;		private var C3:Number = 300;				private var xOffset4:int = 367;		private var A4:Number = 0.01559;		private var B4:Number = -2.0896;		private var C4:Number = 300;				private var bounceXs:Array = [];				private var listenForKeys:Array = [];				private const START_X:int = 32;		private const FINAL_X:int = 500;				public static const LEFT:int = 37;		public static const RIGHT:int = 39;		public static const Z_KEY:int = 90;		public static const X_KEY:int = 88;		public static const C_KEY:int = 67;				//stage instances:		public var bounceSpot1_mc:MovieClip;		public var bounceSpot2_mc:MovieClip;		public var bounceSpot3_mc:MovieClip;		public var bouncer_mc:MovieClip;		//- constructor		public function Main() {			trace("Main :: CONSTRUCTOR");			currentX = START_X;			baby = new Dot();			addChild(baby);			baby.x = currentX;			bounceXs = [bounceSpot1_mc.x, bounceSpot2_mc.x, bounceSpot3_mc.x];						_currentPosition = 0;						listenForKeys = [LEFT, RIGHT, Z_KEY, X_KEY, C_KEY]; 						stage.addEventListener(KeyboardEvent.KEY_DOWN, handleKeyDown);        	stage.addEventListener(KeyboardEvent.KEY_UP, handleKeyUp);									addEventListener(Event.ENTER_FRAME, onFrame);		}				private function handleKeyDown(e:KeyboardEvent=null):void {			//trace("down: "+e.keyCode);			var keyCode:int = e.keyCode;			if (listenForKeys.indexOf(keyCode) >= 0) {				//trace("i'm listening for it!");				var found:int = _currentKeys.indexOf(keyCode);				//trace(found);				if (found < 0) {					keyPressed(keyCode);					_currentKeys.push(keyCode);				}			}		}				private function handleKeyUp(e:KeyboardEvent=null):void {			//trace("up: "+e.keyCode);			var found:int = _currentKeys.indexOf(e.keyCode);			/*if (_currentKey == e.keyCode) {				_currentKey = null;			}*/			if (found >= 0) {				//trace(found);				_currentKeys.splice(found, 1);			}		}				private function keyPressed(keyCode:int):void {			_nextKey = keyCode;		}				private function onFrame(e:Event=null):void {			if (_nextKey != _currentKey) {				//trace("moveMe "+ _nextKey);				if (_nextKey == LEFT) {					//trace("LEFT");					if (_currentPosition > 0) {						_currentPosition--;														}				}				else if(_nextKey == RIGHT) {					//trace("RIGHT");					if (_currentPosition < 2) {						_currentPosition++;														}				}				else if(_nextKey == Z_KEY) {					//trace("Z");					_currentPosition = 0;				}				else if (_nextKey == X_KEY) {					//trace("X");					_currentPosition = 1;				}				else if (_nextKey == C_KEY) {					//trace("C");					_currentPosition = 2;				}				_currentKey = _nextKey;				_nextKey = 0; //this allows arrow keys to be pressed again!						}						bouncer_mc.x = bounceXs[_currentPosition];						currentX = currentX + vX;			if (currentX > FINAL_X) { //loop it				currentX = START_X;			}			var xOffset:Number;			var A:Number;			var B:Number;			var C:Number;			if (currentX < xOffset2) {				xOffset = xOffset1;				A = A1;				B = B1;				C = C1;			}			else if (currentX < xOffset3) {				xOffset = xOffset2;				A = A2;				B = B2;				C = C2;			}			else if (currentX < xOffset4) {				xOffset = xOffset3;				A = A3;				B = B3;				C = C3;			}						else { //the last bounce segment before it loops				xOffset = xOffset4;				A = A4;				B = B4;				C = C4;			}			currentY = A*(currentX - xOffset)*(currentX - xOffset) + B*(currentX - xOffset) + C;			baby.x = currentX;			baby.y = currentY;		}	}	}